spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    props:
      sql:
        show: true
    datasource:
      names: m1
      m1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://wjjzst.com:3306/course_db?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
        password: Wzzst310@163.com
        type: com.zaxxer.hikari.HikariDataSource
        username: root
    sharding:
      tables:
        record:
          actual-data-nodes: m1.record_$->{1..3}_$->{2020..2020}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
          key-generator:
            column: cid
            type: SNOWFLAKE
          table-strategy:
#            inline:
#              algorithm-expression: record_$->{cid % 3 + 1}
#              sharding-column: cid
            complex:
              sharding-columns: card_no,create_at
              algorithm-class-name: com.wjjzst.db.mysql.shardingsphere.config.TimeAndIdShardingAlgorithm
  flyway:
    enabled: true
    clean-disabled: true #禁止flyway执行清理
    ignore-missing-migrations: true #忽略缺失的升级脚本验证
    locations: classpath:db/migration,classpath:test/db/migration #升级脚本位置，可以多个，可以给每个环境使用不同位置
    baseline-on-migrate: true #如果我们并不是在项目初就加flyway的话，则在有历史数据的情况下，加入flyway后，将会出现：set baselineOnMigrate to true to initialize the schema history table.解决方法将baselineOnMigrate设置为true。注意，不同版本的设置方法并不相同。有的版本是：spring.flyway.baselineOnMigrate有的则是flyway.baselineOnMigrate
    baseline-version: 1.0.0
    sql-migration-prefix: V
    sql-migration-suffixes: .sql
    # schemas: test
