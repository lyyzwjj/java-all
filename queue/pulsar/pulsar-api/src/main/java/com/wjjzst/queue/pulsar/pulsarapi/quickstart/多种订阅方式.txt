4.4 订阅方式说明

① 多主题订阅

通过namaspace或者正则表达式来实现多个主题订阅，也可直接指定主题列表（可跨命名空间）

// Subscribe to all topics in a namespace
Pattern allTopicsInNamespace = Pattern.compile("public/default/.*");
Consumer allTopicsConsumer = pulsarClient.newConsumer()
        .subscriptionName(subscription)
        .topicsPattern(allTopicsInNamespace)
        .subscribe();

// Subscribe to a subsets of topics in a namespace, based on regex
Pattern someTopicsInNamespace = Pattern.compile("public/default/foo.*");
Consumer allTopicsConsumer = pulsarClient.newConsumer()
        .subscriptionName(subscription)
        .topicsPattern(someTopicsInNamespace)
        .subscribe();
多主题订阅默认是，消费者的 subscriptionTopicsMode 是 PersistentOnly 。 subscriptionTopicsMode 的可用选项有 PersistentOnly ， NonPersistentOnly 和 AllTopics 。

        .subscriptionTopicsMode(RegexSubscriptionMode.AllTopics) //控制订阅的主题类型（持久化/非持久化/All）
还可以异步订阅多个主题

Consumer multiTopicConsumer = consumerBuilder
        .topic(
            "topic-1",
            "topic-2",
            "topic-3"
        )       //直接指定主题列表
        .subscribe();

Pattern allTopicsInNamespace = Pattern.compile("persistent://public/default.*");
consumerBuilder
        .topics(topics)
        .subscribeAsync()
        .thenAccept(this::receiveMessageFromConsumer);

private void receiveMessageFromConsumer(Object consumer) {
    ((Consumer)consumer).receiveAsync().thenAccept(message -> {
                // Do something with the received message
                receiveMessageFromConsumer(consumer);
            });
}
② 4种订阅模式

一个主题可以有多个 不同订阅模式 的订阅。但是，一个subscription一次只能有一种订阅模式。除非此subscription的所有现有消费者都处于离线状态，否则你无法更改订阅模式。

独占

Consumer consumer = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Exclusive)
        .subscribe()
若是分区topic，第一个消费者消费所有分区topic。消费顺序与生产顺序相同。

灾备

Consumer consumer1 = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Failover)
        .subscribe()
Consumer consumer2 = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Failover)
        .subscribe()
//conumser1 is the active consumer, consumer2 is the standby consumer.
//consumer1 receives 5 messages and then crashes, consumer2 takes over as an  active consumer.
多个消费者可以附加到同一个订阅，但只有第一个消费者是活跃的，其他消费者是备用的。

如果一个主题是分区主题，则每个分区只有一个活跃消费者，一个分区的消息只分发给一个消费者，多个分区的消息分发给多个消费者。

共享

Consumer consumer1 = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Shared)
        .subscribe()

Consumer consumer2 = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Shared)
        .subscribe()
//Both consumer1 and consumer 2 is active consumers.
在共享订阅模式中，多个消费者可以附加到相同的订阅，并且消息在消费者之间以轮询分发的方式传递。

Shared 订阅有更好的灵活性，但不能提供顺序保证。

Key_shared（Pulsar2.4.0版本起支持）

Consumer consumer1 = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Key_Shared)
        .subscribe()

Consumer consumer2 = client.newConsumer()
        .topic("my-topic")
        .subscriptionName("my-subscription")
        .subscriptionType(SubscriptionType.Key_Shared)
        .subscribe()
//Both consumer1 and consumer2 are active consumers.
具有相同key的消息按顺序仅传递给一个消费者。

事先不知道哪些key会被分配给哪个消费者，但一个key只会在同一时间被分配给一个消费者。

如果未指定消息的key，则默认情况下将不带key的消息按顺序分发给一个消费者。

Key_shared与批处理共用的注意点

如果在生产者端启用批处理，默认情况下，具有不同key的消息将被添加到批处理中。broker将把batch分发给消费者，因此默认的批处理机制可能会破坏Key_Shared订阅保证的消息分发语义。生产者需要使用 KeyBasedBatcher 。

Producer producer = client.newProducer()
        .topic("my-topic")
        .batcherBuilder(BatcherBuilder.KEY_BASED)
        .create();
或者生产者可以禁用批处理。

Producer producer = client.newProducer()
        .topic("my-topic")
        .enableBatching(false)
        .create();